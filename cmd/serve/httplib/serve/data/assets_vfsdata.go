// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 28, 20, 55, 13, 616036310, time.UTC),
		},
		"/static": &vfsgen۰DirInfo{
			name:    "static",
			modTime: time.Date(2018, 12, 28, 21, 2, 15, 733900067, time.UTC),
		},
		"/static/style.css": &vfsgen۰FileInfo{
			name:    "style.css",
			modTime: time.Date(2018, 12, 28, 21, 3, 5, 371530275, time.UTC),
			content: []byte("\x2f\x2a\x20\x50\x6c\x61\x63\x65\x68\x6f\x6c\x64\x65\x72\x20\x66\x6f\x72\x20\x73\x74\x79\x6c\x65\x73\x68\x65\x65\x74\x20\x2a\x2f"),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(2018, 12, 28, 19, 56, 11, 663690228, time.UTC),
		},
		"/templates/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 12, 28, 22, 22, 15, 763776008, time.UTC),
			uncompressedSize: 1145,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x79\x8a\xc1\x2a\xdc\x6a\x3b\x0b\x8b\x50\x71\x7c\xa1\x8b\x84\xb4\xfc\xd1\xb2\x1c\x38\xba\xf5\xa4\xb6\xe4\x38\x95\x63\x84\x20\xf2\xbb\x23\xd7\x29\x74\xbb\x2d\xec\x85\x3d\xb5\x33\xf3\xe5\xd3\x6f\x26\x33\x11\x4f\x96\x1f\xdf\xdc\x7e\xfd\x74\x05\x26\x76\x4e\x56\x22\xff\x80\x53\x7e\xd3\x10\xf4\x44\x56\x95\x30\xa8\xb4\xac\x00\x00\x44\x87\x51\xc1\xda\xa8\x30\x60\x6c\xc8\xb7\xd8\xce\x5f\x91\xa9\x14\x6d\x74\x28\xc7\x11\xe8\x6d\xfe\x07\x29\x09\x56\x72\x95\x60\xc5\xa2\x12\xab\x5e\xff\x98\xf4\xa6\x3e\x12\x9b\x5a\x56\x93\x95\x5a\x39\x84\x35\x3a\xb7\x55\x5a\xdb\x8c\xf2\x9c\xec\xe2\x61\xab\xd6\xfb\x78\xd5\x07\x8d\xa1\x21\x9c\xc0\x77\xab\xa3\x69\x48\xcd\xf9\xd3\x09\xa7\xf8\x84\x3f\x41\x49\x18\x50\xce\x6e\x7c\x43\x1c\xb6\x91\xc8\x0f\xaa\x43\xc1\xa2\xf9\x87\xec\x7d\xaf\x6d\x6b\x51\x3f\x40\xfa\xd9\xfe\x3c\x72\x14\x2c\x63\xfc\x0e\xc7\x11\x6c\x0b\x74\x69\xc3\x0d\x76\x7d\xc4\x94\xfe\xc6\xab\xa5\x50\x60\x02\xb6\x0d\xa1\x94\x11\x49\xa9\x60\x4a\x0a\x16\xf5\x7d\xe5\x33\xbf\x1a\xb6\xaf\x1f\x5e\x2b\x60\x07\x5c\xe8\x35\xa4\x74\x07\x35\x28\xbf\x41\x98\x59\x58\x34\x40\xaf\x7c\x0c\x16\x07\x38\x40\x3e\x8b\x7d\x27\xb1\x4b\xee\xfb\x18\x47\x98\x59\xfa\xe5\xe6\x1a\x52\x22\xb2\x44\xd7\xa8\xda\xdd\x0e\xa8\x23\xa7\x93\xcd\xdc\xf3\x2e\x33\xf5\x7d\xcc\x5e\xef\x86\xa5\x0d\xc7\x8c\x07\xca\x99\xa5\xfb\xf7\x49\xdf\xf6\xa1\x53\x11\xc8\x05\xe7\x2f\xe7\xbc\x9e\xf3\x0b\xa8\x2f\x17\xfc\xc5\x82\x5f\x92\x53\x16\x79\x48\x6e\xc0\x73\xee\x65\xca\x27\x9f\x2a\xa3\xfd\xcf\xbd\xcd\x2c\xcd\xfb\xf7\xf8\xe0\x67\x36\x69\xaa\xe5\x6b\xce\xc7\xcf\xca\xf5\x0b\xb6\xfb\xd2\xfc\x0a\x00\x00\xff\xff\x7a\x9d\x99\xf3\x79\x04\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static"].(os.FileInfo),
		fs["/templates"].(os.FileInfo),
	}
	fs["/static"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static/style.css"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
